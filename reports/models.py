from django.db import models

class Brand(models.Model):
    BRAND_TYPE_CHOICES = [
        ('main', 'Main Brand'),
        ('competitor', 'Competitor Brand'),
    ]
    name = models.CharField(max_length=255, unique=True)
    brand_type = models.CharField(max_length=10, choices=BRAND_TYPE_CHOICES, default='main')

    def __str__(self):
        return self.name

class Report(models.Model):
    brand = models.ForeignKey(Brand, on_delete=models.CASCADE, related_name='reports')
    created_at = models.DateTimeField(auto_now_add=True)
    report_date = models.DateField(db_index=True, null=True, blank=True)
    competitor_brand_name = models.CharField(max_length=255, blank=True)

    # Raw data used for the report generation
    raw_data = models.JSONField(null=True, blank=True, help_text="Stores all raw data collected from APIs (YouTube, Naver, etc.)")

    # The final, structured report generated by the AI
    report_data = models.JSONField(null=True, blank=True, help_text="The complete, structured report generated by Gemini, following the detailed schema.")

    # Optional: Store generated media file paths if needed
    generated_wordcloud_path = models.CharField(max_length=1024, null=True, blank=True)
    generated_chart_paths = models.JSONField(null=True, blank=True, help_text="Paths to generated chart images")

    def __str__(self):
        return f"Report for {self.brand.name} on {self.report_date}"

    class Meta:
        ordering = ['-report_date']
        indexes = [
            models.Index(fields=['brand', 'report_date']),
        ]
